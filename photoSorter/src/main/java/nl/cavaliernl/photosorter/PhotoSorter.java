/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nl.cavaliernl.photosorter;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.concurrent.Callable;

import static nl.cavaliernl.photosorter.MetaDataExtractor.getCreationInstant;

@Command(name = "photoSorter", mixinStandardHelpOptions = true, version = "photoSorter 1.0",
        description = "Reads a directory of images and creates a new folder-structure based on creation date and other info.")
public class PhotoSorter implements Callable<Integer> {
    private static final Logger logger = LogManager.getLogger(PhotoSorter.class);

    @Option(names = { "-c", "--cameraName" }, description = "a short camera name")
    @SuppressWarnings("unused")
    private String cameraName;

    @Option(names = { "-s", "--source" }, description = "the source folder", required = true)
    @SuppressWarnings("unused")
    private File sourceFolder;

    @Option(names = { "-t", "--target" }, description = "the target folder (default is the current folder)")
    @SuppressWarnings("unused")
    private File targetFolder;

    @Override
    public Integer call() throws Exception {
        Files.walk(sourceFolder.toPath())
                .filter(path -> !path.getFileName().toString().equals("Thumbs.db"))
                .forEach(path -> {
                    if (Files.isRegularFile(path)) {
                        Path datedTargetFolder = createTargetPath(path);
                        logger.debug("Move to: {}", datedTargetFolder);
                        try {
                            if (Files.notExists(datedTargetFolder)) {
                                Files.createDirectories(datedTargetFolder);
                            }
                            Path datedTargetFile = Paths.get(datedTargetFolder.toString(), path.getFileName().toString());
                            Files.move(path, datedTargetFile);
                        } catch (IOException e) {
                            logger.error("Could not move {} to {}", path, datedTargetFolder, e);
                        }
                    }
                });

        return 0;
    }

    private Path createTargetPath(Path path) {
        LocalDateTime creationDateTime = getCreationInstant(path);
        String targetPath;
        if (targetFolder != null) {
            targetPath = targetFolder.getAbsolutePath();
        } else {
            targetPath = Paths.get("").toString();
        }
        String yearFolderName = "" + creationDateTime.getYear();
        String dayFolderName = String.format("%02d-%02d-%02d -", creationDateTime.getYear(), creationDateTime.getMonthValue(), creationDateTime.getDayOfMonth());

        if (cameraName != null) {
            dayFolderName = String.format("%s %s -", dayFolderName, cameraName);
        }

        return Paths.get(targetPath, yearFolderName, dayFolderName);
    }

    public static void main(String[] args) {
        int exitCode = new CommandLine(new PhotoSorter()).execute(args);
        System.exit(exitCode);
    }
}
